name: Release

on:
  workflow_call:
    inputs:
      dry-run:
        description: 'Compiles the app but not upload artifacts to distribution server'
        default: false
        required: false
        type: boolean
    secrets:
      GH_TOKEN:
        required: true
      BUILD_CERTIFICATE_BASE64:
        required: true
      P12_PASSWORD:
        required: true
      KEYCHAIN_PASSWORD:
        required: true
      APPLE_IDENTITY:
        required: true
      VITE_APP_API:
        required: true
      VITE_START_PAGE_URL:
        required: true

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  draft_release:
    permissions:
      contents: write

    strategy:
      fail-fast: false  # 更改为false，允许一个平台失败时其他平台继续
      matrix:
        include:
          - os: windows-latest
            arch: x64
            platform: win
          - os: macos-latest
            arch: x64
            platform: mac-x64
          - os: macos-latest
            arch: arm64
            platform: mac-arm64

    runs-on: ${{ matrix.os }}
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Git LFS
        run: |
          git lfs install
          git lfs pull

      # 配置环境变量
      - name: Configure environment
        env:
          PUPPETEER_SKIP_CHROMIUM_DOWNLOAD: 1
          ELECTRON_MIRROR: "https://npmmirror.com/mirrors/electron/"
          NODE_PRE_GYP_MIRROR: "https://npmmirror.com/mirrors/node-pre-gyp/"
        run: |
          echo "Environment configured"
          # 设置平台特定环境变量
          if [ "${{ matrix.platform }}" == "mac-arm64" ]; then
            echo "ELECTRON_ARCH=arm64" >> $GITHUB_ENV
          elif [ "${{ matrix.platform }}" == "mac-x64" ]; then
            echo "ELECTRON_ARCH=x64" >> $GITHUB_ENV
          fi

      # 缓存依赖
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            ~/.cache/electron
            ~/.cache/node-gyp
          key: ${{ runner.os }}-${{ matrix.arch }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-npm-

      # macOS 特定设置
      - name: Setup macOS build tools
        if: startsWith(matrix.platform, 'mac')
        run: |
          sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer
          sudo xcodebuild -license accept
          
          # 安装Python 3.11
          brew install python@3.11 make gcc
          
          # 设置Python路径
          echo "PYTHON=/opt/homebrew/opt/python@3.11/bin/python3.11" >> $GITHUB_ENV
          
          # 安装setuptools
          /opt/homebrew/opt/python@3.11/bin/python3.11 -m pip install setuptools

      # 设置Node.js
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: npm
          cache-dependency-path: '**/package-lock.json'

      - name: Install native modules
        run: npm install --ignore-scripts sqlite3 electron

      - name: Rebuild native modules
        if: matrix.os == 'macos-latest'
        run: |
          npm rebuild sqlite3 --build-from-source --python=/opt/homebrew/opt/python@3.11/bin/python3.11

      - name: Install dependencies
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 20
          max_attempts: 3
          retry_wait_seconds: 30
          command: npm ci --verbose
          
      # 特别构建原生模块 - 基于架构
      - name: Build native modules for macOS
        if: startsWith(matrix.platform, 'mac')
        run: |
          if [ "${{ matrix.platform }}" == "mac-arm64" ]; then
            echo "Building native modules for ARM64"
            npm run build:native-addon:mac-arm64
          elif [ "${{ matrix.platform }}" == "mac-x64" ]; then
            echo "Building native modules for x64"
            npm run build:native-addon:mac-x64
          fi
          
          # 检查编译的模块
          ls -la ./packages/main/src/native-addon/build/Release/

      # 安装Apple证书
      - name: Install Apple certificates
        if: startsWith(matrix.platform, 'mac')
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
        run: |
          CERTIFICATE_PATH=$HOME/certificates
          KEYCHAIN_PATH=$HOME/Library/Keychains/build.keychain-db
          
          mkdir -p $CERTIFICATE_PATH
          echo "$BUILD_CERTIFICATE_BASE64" | base64 -D > $CERTIFICATE_PATH/certificate.p12
          
          # 创建钥匙串
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          
          # 导入证书
          security import $CERTIFICATE_PATH/certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

      # 创建环境配置
      - name: Create .env.production.local
        run: |
          echo "VITE_APP_API=${{ secrets.VITE_APP_API }}" > .env.production.local
          echo "VITE_START_PAGE_URL=${{ secrets.VITE_START_PAGE_URL }}" >> .env.production.local

      # 构建项目
      - name: Build Project
        run: npm run build

      # 构建和发布项目（使用electron-builder内置发布功能）
      - name: Build and Publish for Windows
        if: matrix.platform == 'win'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 30
          shell: bash
          command: npx electron-builder --win --config .electron-builder.config.js --publish always
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BUILD_TIME: ${{ github.run_number }}

      - name: Build and Publish for macOS x64
        if: matrix.platform == 'mac-x64'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 30
          shell: bash
          command: npx electron-builder --mac --x64 --config .electron-builder.config.js --publish always
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BUILD_TIME: ${{ github.run_number }}
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}

      - name: Build and Publish for macOS arm64
        if: matrix.platform == 'mac-arm64'
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 15
          max_attempts: 3
          retry_wait_seconds: 30
          shell: bash
          command: npx electron-builder --mac --arm64 --config .electron-builder.config.js --publish always
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          BUILD_TIME: ${{ github.run_number }}
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
      
      # # macOS特定：签名原生模块（如果需要）
      # - name: Sign native modules (macOS)
      #   if: startsWith(matrix.platform, 'mac') && !inputs.dry-run
      #   env:
      #     APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
      #   run: |
      #     node scripts/sign-native-modules.js

      # # 验证发布
      # - name: Verify Release Assets
      #   if: success() || failure()  # 即使前一步失败也运行
      #   shell: bash
      #   run: |
      #     # 获取BUILD_TIME
      #     BUILD_TIME="${{ github.run_number }}"
          
      #     # 使用最新release而不是特定tag
      #     RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/latest"
      #     echo "检查最新Release: $RELEASE_URL"
          
      #     # 尝试最多5次，每次间隔15秒
      #     MAX_ATTEMPTS=5
      #     for ((i=1; i<=MAX_ATTEMPTS; i++)); do
      #       echo "检查资产 (尝试 $i / $MAX_ATTEMPTS)..."
      #       ASSETS=$(curl -s -H "Authorization: token ${{ secrets.GH_TOKEN }}" $RELEASE_URL)
            
      #       # 检查是否包含BUILD_TIME以及平台标识
      #       if echo "$ASSETS" | grep -q "${BUILD_TIME}" && echo "$ASSETS" | grep -q "${{ matrix.platform }}"; then
      #         echo "✅ 成功验证平台 ${{ matrix.platform }} 的资产! (包含构建编号: ${BUILD_TIME})"
      #         exit 0
      #       else
      #         echo "资产未找到，等待中..."
      #         if [ $i -lt $MAX_ATTEMPTS ]; then
      #           sleep 15
      #         fi
      #       fi
      #     done
          
      #     echo "❌ $MAX_ATTEMPTS 次尝试后验证失败"
      #     echo "API响应摘要:"
      #     echo "$ASSETS" | grep -oE '"name":"[^"]+"' || echo "无法解析资产名称"
      #     exit 1
